name: "Prepare infra meeting notes as release"

on:
  workflow_dispatch:
    inputs:
      milestone_id:
        description: '"Current" milestone id to prepare as release'
        required: true
        default: '1'
        type: string
      milestone_name:
        description: '"Current" milestone name'
        required: true
        default: 'current'
        type: string
      next_milestone_id:
        description: '"Next" milestone id'
        required: true
        # TODO: set this default 'next' value via another GHA retrieving the last milestone opened
        default: '4'
        type: string
      next_milestone_name:
        description: '"Next" milestone name'
        required: true
        default: 'next'
        type: string

jobs:
  release:
    name: "Prepare infra meeting notes as release"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Gather release body"
        id: gather_release_body
        uses: "actions/github-script@v6"
        with:
          result-encoding: string
          script: |
            const getMilestoneAsMarkdown = async function(milestone, milestoneName) {
              const opts = github.rest.issues.listForRepo.endpoint.merge({
                ...context.issue,
                milestone,
                state: 'all'
              })
              const issues = await github.paginate(opts)

              let closedIssues = []
              let openIssues = []
              for (const issue of issues) {
                if (issue.state == 'closed') {
                  closedIssues.push(issue)
                } else {
                  openIssues.push(issue)
                }
              }
              let body = ''
              
              if (closedIssues.length > 0) {
                body = body.concat("\r\n\r\n")
                  .concat(`## Closed issues in [${milestoneName} milestone](${context.payload.repository.html_url}/milestones/${milestone}):`)
                for (const issue of closedIssues) {
                  body = body.concat("\r\n").concat(`  * [${issue.title}](${issue.html_url})`)
                }
              }

              if (openIssues.length > 0) {
                body = body.concat("\r\n\r\n")
                  .concat(`## Open issues in [${milestoneName} milestone](${context.payload.repository.html_url}/milestones/${milestone}):`)
                for (const issue of openIssues) {
                  body = body.concat("\r\n").concat(`  * [${issue.title}](${issue.html_url})`)
                }
              }

              return body
            }

            // Retrieve the markdown content related to the "current" milestone issues
            bodyCurrent = await getMilestoneAsMarkdown(context.payload.inputs.milestone_id, context.payload.inputs.milestone_name)
            
            // Retrieve the markdown content related to the "next" milestone issues
            bodyNext = await getMilestoneAsMarkdown(context.payload.inputs.next_milestone_id, context.payload.inputs.next_milestone_name)
            
            bodyCurrentAndNext = bodyCurrent.concat("\r\n\r\n")
              .concat('---')
              .concat(bodyNext)

            // The release body consist of the markdown content gathered above, first as a code block, then as markdown in a <details> block
            releaseBody = 'Markdown for the infra team sync meeting notes preparation:'.concat("\r\n\r\n")
              .concat('<pre>')
              .concat("\r\n")
              .concat(bodyCurrentAndNext)
              .concat("\r\n")
              .concat('</pre>')
              .concat("\r\n\r\n")
              .concat('<details><summary>Preview:</summary>')
              .concat("\r\n\r\n")
              .concat(bodyCurrentAndNext)
              .concat("\r\n\r\n")
              .concat('</detail>')

            return releaseBody

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Create tag
        id: create_tag
        uses: actions/github-script@v6
        env:
          CURRENT_DATE: ${{ steps.date.outputs.date }}
        with:
          script: |
            const tagName = `infra-team-sync-${process.env.CURRENT_DATE}_${context.runNumber}`
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            })
            return tagName

      - name: "Create release"
        id: create_release
        uses: "actions/github-script@v6"
        env:
          RELEASE_TAG: ${{steps.create_tag.outputs.result}}
          RELEASE_BODY: ${{steps.gather_release_body.outputs.result}}
        with:
          script: |
            // Remove the double quotes around the tag name
            releaseTag = process.env.RELEASE_TAG.slice(1, -1);

            // Create the (draft) release with the content retrieved in earlier step
            try {
              await github.rest.repos.createRelease({
                draft: true,
                generate_release_notes: false,
                name: releaseTag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: releaseTag,
                body: process.env.RELEASE_BODY,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
