name: "Prepare infra meeting notes release"

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
on:
  workflow_dispatch:
    inputs:
      milestone_id:
        description: 'Milestone id to prepare for release'
        required: true
        default: '1' 
        type: string
      milestone_name:
        description: 'Milestone name'
        required: true
        default: 'current' 
        type: string


jobs:

  # https://localheinz.com/blog/2022/01/24/creating-releases-with-github-actions/
  release:
    name: "Prepare infra meeting notes release"
    runs-on: "ubuntu-latest"
    steps:


      # - name: Retrieve version
      #   run: |
      #     echo "::set-output name=TAG_NAME::$(cat projectFile | grep -Po '(?<=Version>).*(?=</Version>)')"
      #   id: version

      #- name: Create Release
       # id: create_release
        # uses: actions/create-release@v1
        ##env:
         # GITHUB_TOKEN: ${{ secrets.token }}
        #with:
         # tag_name: ${{ steps.version.outputs.TAG_NAME }}


      # - name: Run script file
      #   run: .github/workflows/milestone2md.sh
        #run: |
        #  echo "TEST1"
        #  echo ${GITHUB_WORKSPACE}
        #  echo "TEST2"
        #  echo $GH_CURRENT_MILESTONE_ID
        #  echo "END TEST"
        #  ls -R ${PWD}
        #  echo "END TEST"
        #  ls -R ${GITHUB_WORKSPACE}
        #  chmod +x "${PWD}/.github/workflows/milestone2md.sh"
        #  echo "RELEASE_BODY=$(${PWD}/.github/workflows/milestone2md.sh)" >> $GITHUB_ENV
        # shell: bash
        # id: shell_script
        # env:
        #   GH_CURRENT_MILESTONE_ID: ${{ inputs.milestone_id }}


      # - name: "Determine tag"
      #   run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
      # - name: Generate token
      #   id: generate_token
      #   uses: tibdex/github-app-token@v1
      #   with:
      #     app_id: ${{ secrets.INFRA_GITHUB_APP_ID }}
      #     private_key: ${{ secrets.INFRA_GITHUB_APP_PRIVATE_KEY }}
      - name: View context attributes
        uses: actions/github-script@v6
        with:
          script: console.log(context)
      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          # github-token: "${{ steps.generate_token.outputs.token }}"
          script: |
            console.log('start')
            console.log('milestone_id:' + context.payload.inputs.milestone_id)

            const milestone = context.payload.inputs.milestone_id
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              ...context.issue,
              milestone,
              state: 'all'
            })
            const issues = await github.paginate(opts)

            let milestoneIssues = []
            for (const issue of issues) {
              console.log('-----')
              console.log(issue.id)
              milestoneIssues[issue.state] = issue
              /*
              if (issue.number === context.issue.number) {
                continue
              }

              if (issue.pull_request) {
                return // Creator is already a contributor.
              }
              */
            }
            console.log("TADA?")
            # console.log(milestoneIssues)
            for (const issue of milestoneIssues['closed']) {
              console.log('====')
              console.log(issue.state)
              console.log(issue.id)
            }

            /*
            try {
              await github.rest.repos.createRelease({
                draft: true,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
                body: process.env.RELEASE_BODY,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
            */
